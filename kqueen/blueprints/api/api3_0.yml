openapi: "3.0.0"

info:
  version: "0.8"
  title: "Kubernetes Queen API"
  description: "A simple API to interact with Kubernetes clusters"

servers:
  - url: "http://localhost:5000/api/v1"
    description: "Development server"

components:
  securitySchemes:
    JWT:
      type: "http"
      scheme: "bearer"
      bearerFormat: "JWT"
  schemas:
    # HTTP status responses
    statusUnauthorized:
      type: "object"
      properties:
        description:
          type: "string"
          description: "Error description"
          example: "Invalid credentials"
        error:
          type: "string"
          description: "HTTP error"
          example: "Bad Request"
        status_code:
          type: "integer"
          description: "HTTP error code"
          example: 401
    # Policy model
    PolicyRuleValue:
      type: "string"
      enum:
        - "ALL"
        - "ADMIN_OR_OWNER"
        - "IS_ADMIN"
        - "IS_OWNER"
        - "IS_SUPERADMIN"
    Policy:
      type: "object"
      properties:
        cluster:create:
          $ref: "#/components/schemas/PolicyRuleValue"
        cluster:delete:
          $ref: "#/components/schemas/PolicyRuleValue"
        cluster:get:
          $ref: "#/components/schemas/PolicyRuleValue"
        cluster:list:
          $ref: "#/components/schemas/PolicyRuleValue"
        cluster:update:
          $ref: "#/components/schemas/PolicyRuleValue"
        organization:create:
          $ref: "#/components/schemas/PolicyRuleValue"
        organization:delete:
          $ref: "#/components/schemas/PolicyRuleValue"
        organization:get:
          $ref: "#/components/schemas/PolicyRuleValue"
        organization:list:
          $ref: "#/components/schemas/PolicyRuleValue"
        organization:update:
          $ref: "#/components/schemas/PolicyRuleValue"
        provisioner:create:
          $ref: "#/components/schemas/PolicyRuleValue"
        provisioner:delete:
          $ref: "#/components/schemas/PolicyRuleValue"
        provisioner:get:
          $ref: "#/components/schemas/PolicyRuleValue"
        provisioner:list:
          $ref: "#/components/schemas/PolicyRuleValue"
        provisioner:update:
          $ref: "#/components/schemas/PolicyRuleValue"
        user:create:
          $ref: "#/components/schemas/PolicyRuleValue"
        user:delete:
          $ref: "#/components/schemas/PolicyRuleValue"
        user:get:
          $ref: "#/components/schemas/PolicyRuleValue"
        user:list:
          $ref: "#/components/schemas/PolicyRuleValue"
        user:update:
          $ref: "#/components/schemas/PolicyRuleValue"
    # Database objects
    Organization:
      type: "object"
      properties:
        id:
          type: "string"
          format: "uuid"
        name:
          type: "string"
        namespace:
          type: "string"
        policy:
          $ref: "#/components/schemas/Policy"
        created_at:
          type: "string"
          format: "date-time"
      required:
        - "name"
        - "namespace"
        - "created_at"
    getUser:
      type: "object"
      properties:
        id:
          type: "string"
          format: "uuid"
        username:
          type: "string"
        email:
          type: "string"
          format: "email"
        password:
          type: "string"
          format: "password"
        organization:
          $ref: "#/components/schemas/Organization"
        created_at:
          type: "string"
          format: "date-time"
        role:
          type: "string"
          enum:
            - "superadmin"
            - "admin"
            - "member"
        active:
          type: "boolean"
    postUser:
      type: "object"
      properties:
        id:
          type: "string"
          format: "uuid"
        username:
          type: "string"
        email:
          type: "string"
        password:
          type: "string"
        organization:
          type: "string"
          description: "Reference to the related Organization"
          example: "Organization:<uuid>"
        created_at:
          type: "string"
          format: "date-time"
        role:
          type: "string"
          enum:
            - "superadmin"
            - "admin"
            - "member"
        active:
          type: "boolean"
      required:
        - "username"
        - "email"
        - "password"
        - "organization"
        - "created_at"
        - "role"
        - "active"
    clusterState:
      type: "string"
      enum:
        - "OK"
        - "Error"
        - "Deploying"
        - "Destroying"
        - "Unknown"
    getCluster:
      type: "object"
      properties:
        id:
          type: "string"
          format: "uuid"
        name:
          type: "string"
        provisioner:
          $ref: "#/components/schemas/getProvisioner"
        state:
          $ref: "#/components/schemas/clusterState"
        kubeconfig:
          type: "object"
        metadata:
          type: "object"
        created_at:
          type: "string"
          format: "date-time"
        owner:
          $ref: "#/components/schemas/getUser"
    postCluster:
      type: "object"
      properties:
        id:
          type: "string"
          format: "uuid"
        name:
          type: "string"
        provisioner:
          type: "string"
          description: "Reference to the related Provisioner"
          example: "Provisioner:<uuid>"
        state:
          $ref: "#/components/schemas/clusterState"
        kubeconfig:
          description: "Kubeconfig file in JSON format"
          type: "object"
        metadata:
          type: "object"
        created_at:
          type: "string"
          format: "date-time"
        owner:
          type: "string"
          description: "Reference to the related User"
          example: "User:<uuid>"
      required:
        - "name"
        - "provisioner"
        - "owner"
    getProvisioner:
      type: "object"
      properties:
        id:
          type: "string"
          format: "uuid"
        name:
          type: "string"
        engine:
          type: "string"
        state:
          $ref: "#/components/schemas/provisionerState"
        parameters:
          description: "Engine-specific parameters"
          type: "object"
        created_at:
          type: "string"
          format: "date-time"
        owner:
          $ref: "#/components/schemas/getUser"
    GCEProvisioner:
      type: "object"
      description: "Set up with UI: http://kqueen.readthedocs.io/en/latest/kqueen.html#provision-a-kubernetes-cluster-using-google-kubernetes-engine
                    Set up with CLI: http://kqueen.readthedocs.io/en/latest/kqueen.html#google-cloud-cli-operations-with-kqueen"
      properties:
        id:
          type: "string"
          format: "uuid"
        name:
          type: "string"
        engine:
          type: "string"
          enum:
            - "kqueen.engines.GceEngine"
        state:
          $ref: "#/components/schemas/provisionerState"
        parameters:
          description: "GCE-specific parameters"
          type: "object"
          properties:
            service_account_info:
              description: "Google cloud account json file
                            https://cloud.google.com/video-intelligence/docs/common/auth"
              type: "object"
              properties:
                auth_provider_x509_cert_url:
                  type: "string"
                auth_uri:
                  type: "string"
                client_email:
                  type: "string"
                client_id:
                  type: "string"
                client_x509_cert_url:
                  type: "string"
                private_key:
                  type: "string"
                private_key_id:
                  type: "string"
                project_id:
                  type: "string"
                token_uri:
                  type: "string"
        created_at:
          type: "string"
          format: "date-time"
        owner:
          type: "string"
          description: "Reference to the related User"
          example: "User:<uuid>"
      required:
        - "name"
        - "engine"
        - "owner"
    AzureProvisioner:
      type: "object"
      description: "Set up with UI: http://kqueen.readthedocs.io/en/latest/kqueen.html#provision-a-kubernetes-cluster-using-azure-kubernetes-service
                    Set up with CLI: http://kqueen.readthedocs.io/en/latest/kqueen.html#azure-cli-operations-with-kqueen"

      properties:
        id:
          type: "string"
          format: "uuid"
        name:
          type: "string"
        engine:
          type: "string"
          enum:
            - "kqueen.engines.AksEngine"
        state:
          $ref: "#/components/schemas/provisionerState"
        parameters:
          description: "Azure-specific parameters"
          type: "object"
          properties:
            client_id:
              type: "string"
              description: "Application ID"
            secret:
              type: "string"
              description: "secret keyL (add link)"
            tenant:
              type: "string"
              description: "Directory ID"
            subscription_id:
              type: "string"
            resource_group_name:
              type: "string"
        created_at:
          type: "string"
          format: "date-time"
        owner:
          type: "string"
          description: "Reference to the related User"
          example: "User:<uuid>"
      required:
        - "name"
        - "engine"
        - "owner"
    JenkinsProvisioner:
      type: "object"
      properties:
        id:
          type: "string"
          format: "uuid"
        name:
          type: "string"
        engine:
          type: "string"
          enum:
            - "kqueen.engines.JenkinsEngine"
        state:
          $ref: "#/components/schemas/provisionerState"
        parameters:
          description: "JenkinsEngine-specific parameters"
          type: "object"
          properties:
            username:
              type: "string"
              description: "Jenkins username for the jenkins server
                            provided in the config file"
            password:
              type: "string"
              description: "Jenkins password for the jenkins server
                            provided in the config file"
        created_at:
          type: "string"
          format: "date-time"
        owner:
          type: "string"
          description: "Reference to the related User"
          example: "User:<uuid>"
      required:
        - "name"
        - "engine"
        - "owner"
    ManualProvisioner:
      type: "object"
      properties:
        id:
          type: "string"
          format: "uuid"
        name:
          type: "string"
        engine:
          type: "string"
          enum:
            - "kqueen.engines.ManualEngine"
        state:
          $ref: "#/components/schemas/provisionerState"
        created_at:
          type: "string"
          format: "date-time"
        owner:
          type: "string"
          description: "Reference to the related User"
          example: "User:<uuid>"
      required:
        - "name"
        - "engine"
        - "owner"
    provisionerState:
      type: "string"
      enum:
        - "OK"
        - "Error"
        - "Not Reachable"
    Engine:
      type: "object"
      properties:
        name:
          type: "string"
        verbose_name:
          type: "string"
        parameters:
          type: "object"
          properties:
            provisioner:
              type: "object"
              description: "Engine specific parameters required to create Provisioner"
            cluster:
              type: "object"
              description: "Engine specific parameters required to create Cluster"
    # Kubernetes resources
    Addon:
      type: "object"
      properties:
        name:
          type: "string"
          example: "Monocular"
        link:
          type: "string"
          format: "url"
          example: "http://monocular-load-balancer-or-ingress-url"
        icon:
          type: "string"
          format: "url"
          example: "https://www.modarmory.com/wp-content/uploads/2014/05/night-vision-monocular-icon.png"
    nodePod:
      description: "List of one-key dictionaries where key is name of Node and value is number of pods on the Node."
      type: "object"
      additionalProperties:
        type: "integer"
    clusterStatus:
      type: "object"
      properties:
        addons:
          type: "array"
          items:
            $ref: "#/components/schemas/Addon"
        deployments:
          $ref: "https://raw.githubusercontent.com/kubernetes/kubernetes/master/api/openapi-spec/swagger.json#/definitions/io.k8s.api.apps.v1.DeploymentList"
        nodes:
          $ref: "https://raw.githubusercontent.com/kubernetes/kubernetes/master/api/openapi-spec/swagger.json#/definitions/io.k8s.api.core.v1.NodeList"
        nodes_pods:
          type: "array"
          items:
            $ref: "#/components/schemas/nodePod"
        persistent_volume_claims:
          $ref: "https://raw.githubusercontent.com/kubernetes/kubernetes/master/api/openapi-spec/swagger.json#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimList"
        persistent_volumes:
          $ref: "https://raw.githubusercontent.com/kubernetes/kubernetes/master/api/openapi-spec/swagger.json#/definitions/io.k8s.api.core.v1.PersistentVolumeList"
        pods:
          $ref: "https://raw.githubusercontent.com/kubernetes/kubernetes/master/api/openapi-spec/swagger.json#/definitions/io.k8s.api.core.v1.PodList"
        replica_sets:
          $ref: "https://raw.githubusercontent.com/kubernetes/kubernetes/master/api/openapi-spec/swagger.json#/definitions/io.k8s.api.apps.v1.ReplicaSetList"
        services:
          $ref: "https://raw.githubusercontent.com/kubernetes/kubernetes/master/api/openapi-spec/swagger.json#/definitions/io.k8s.api.core.v1.ServiceList"
        version:
          $ref: "https://raw.githubusercontent.com/kubernetes/kubernetes/master/api/openapi-spec/swagger.json#/definitions/io.k8s.apimachinery.pkg.version.Info"
    getAuthConfig:
      type: "object"
      auth_method_name:
        type: "object"
        properties:
          engine:
            type: "string"
            description: "Name of the authentication class"
          name:
            type: "string"
            description: "Verbose name of the authentication method"
          ui_parameters:
            type: "object"
            description: "Auth-method specific parameters"
          parameters:
            type: "object"
            description: "Authentication class initialization parameters"

  responses:
    Unauthorized:
      description: "Authorization information is missing or invalid."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/statusUnauthorized"

security:
  - JWT: []

paths:
  # auth
  /auth:
    post:
      summary: "Authentication URL which returns JWT tokens"
      tags:
       - "Authentication"
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                username:
                  type: "string"
                  example: "admin"
                password:
                  type: "string"
                  example: "default"
      responses:
        "200":
          description: "Successful authentication"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  access_token:
                    type: "string"
                    description: "JWT token"
        "400":
          description: "Bad request"
          content:
            text/html:
              schema:
                type: "html"
                example: "<html><body><title>400 Bad Request</title><h1>Bad Request</h1><p>Failed to decode JSON object: Expecting ',' delimiter: line 1 column 48 (char 47)</p></body></html>"
        "401":
          $ref: "#/components/responses/Unauthorized"
  # organizations
  /organizations:
    get:
      summary: "List all Organizations"
      tags:
        - "Organizations"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Organization"
        "401":
          $ref: "#/components/responses/Unauthorized"
    post:
      summary: "Create new Organization"
      tags:
        - "Organizations"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Organization"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
        "400":
          description: "Request body is not valid JSON."
        "401":
          $ref: "#/components/responses/Unauthorized"
  /organizations/{id}:
    get:
      summary: "Get information about target Organization"
      tags:
        - "Organizations"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"
          format: "uuid"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          description: "Invalid ID or Organization not found"
    patch:
      summary: "Update data of target Organization"
      tags:
        - "Organizations"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"
          format: "uuid"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Organization"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          description: "Invalid ID or Organization not found"
    delete:
      summary: "Delete target Organization"
      tags:
        - "Organizations"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"
          format: "uuid"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  id:
                    type: "string"
                    format: "uuid"
                  state:
                    type: "string"
                    example: "deleted"
        "400":
          description: "Invalid ID supplied"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          description: "Organization not found"
        "500":
          description: "Could not delete Organization"
  /organizations/{id}/policy:
    get:
      summary: "Get information about target Organization security policies"
      tags:
        - "Organizations"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"
          format: "uuid"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Policy"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          description: "Invalid ID or Organization not found"
  # users
  /users:
    get:
      summary: "List all Users"
      tags:
        - "Users"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/getUser"
        "401":
          $ref: "#/components/responses/Unauthorized"
    post:
      summary: "Create new User"
      tags:
        - "Users"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/postUser"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getUser"
        "400":
          description: "Request body is not valid JSON."
        "401":
          $ref: "#/components/responses/Unauthorized"
  /users/{id}:
    get:
      summary: "Get information about target User"
      tags:
        - "Users"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"
          format: "uuid"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getUser"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          description: "Invalid ID or User not found"
    patch:
      summary: "Update data of target User"
      tags:
        - "Users"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"
          format: "uuid"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/postUser"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getUser"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          description: "Invalid ID or User not found"
    delete:
      summary: "Delete target User"
      tags:
        - "Users"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"
          format: "uuid"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  id:
                    type: "string"
                    format: "uuid"
                  state:
                    type: "string"
                    example: "deleted"
        "400":
          description: "Invalid ID supplied"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          description: "User not found"
        "500":
          description: "Could not delete User"
  /users/{id}/updatepw:
    patch:
      summary: "Update password of target User"
      tags:
        - "Users"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"
          format: "uuid"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                password:
                  type: "string"
                  format: "password"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getUser"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          description: "Invalid ID or User not found"
  # clusters
  /clusters:
    get:
      summary: "List all Clusters"
      tags:
        - "Clusters"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/getCluster"
        "401":
          $ref: "#/components/responses/Unauthorized"
    post:
      summary: "Create new Cluster"
      tags:
        - "Clusters"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/postCluster"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getCluster"
        "400":
          description: "Request body is not valid JSON."
        "401":
          $ref: "#/components/responses/Unauthorized"
  /clusters/{id}:
    get:
      summary: "Get information about target Cluster"
      tags:
        - "Clusters"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"
          format: "uuid"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getCluster"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          description: "Invalid ID or Cluster not found"
    patch:
      summary: "Update data of target Cluster"
      tags:
        - "Clusters"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"
          format: "uuid"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/postCluster"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getCluster"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          description: "Invalid ID or Cluster not found"
    delete:
      summary: "Delete target Cluster"
      tags:
        - "Clusters"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"
          format: "uuid"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  id:
                    type: "string"
                    format: "uuid"
                  state:
                    type: "string"
                    example: "deleted"
        "400":
          description: "Invalid ID supplied"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          description: "Cluster not found"
        "500":
          description: "Could not delete Cluster"
  /clusters/{id}/status:
    get:
      summary: "Get information about target Cluster directly from KubeAPI"
      tags:
        - "Clusters"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"
          format: "uuid"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/clusterStatus"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          description: "Invalid ID or Cluster not found"
  /clusters/{id}/kubeconfig:
    get:
      summary: "Get Kubeconfig from target Cluster"
      tags:
        - "Clusters"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"
          format: "uuid"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                type: "object"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          description: "Invalid ID or Cluster not found"
  /clusters/{id}/topology-data:
    get:
      summary: "Get topology data for target Cluster for visualization purposes"
      tags:
        - "Clusters"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"
          format: "uuid"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                type: "object"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          description: "Invalid ID or Cluster not found"
  /clusters/{id}/progress:
    get:
      summary: "Get deployment progress of target Cluster"
      tags:
        - "Clusters"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"
          format: "uuid"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  response:
                    type: "integer"
                    enum:
                      - 200
                      - 500
                      - 501
                  progress:
                    type: "integer"
                    description: "Percentage of progress: 1 - 100"
                  result:
                    $ref: "#/components/schemas/clusterState"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          description: "Invalid ID or Cluster not found"
  # provisioners
  /provisioners:
    get:
      summary: "List all Provisioners"
      tags:
        - "Provisioners"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/getProvisioner"
        "401":
          $ref: "#/components/responses/Unauthorized"
    post:
      summary: "Create new Provisioner"
      tags:
        - "Provisioners"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/GCEProvisioner"
                - $ref: "#/components/schemas/AzureProvisioner"
                - $ref: "#/components/schemas/ManualProvisioner"
                - $ref: "#/components/schemas/JenkinsProvisioner"
              example:
                GCEProvisioner:
                  application/json:
                    {
                      "engine": "kqueen.engines.GceEngine",
                      "name": "TestGCE",
                      "owner": "User:f3f17c72-09b3-49d4-9619-2880c84826ef",
                      "parameters": {
                         "service_account_info": {
                           "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                           "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                           "client_email": "97547965373-compute@developer.gserviceaccount.com",
                           "client_id": "101913034534212144781",
                           "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/97547965373-compute%40developer.gserviceaccount.com",
                           "private_key": "-----BEGIN PRIVATE KEY--...-----END PRIVATE KEY-----",
                           "private_key_id": "b93950d543e8964995afabfe14561a77414a9d37",
                           "project_id": "awesome-beaker-197214",
                           "token_uri": "https://accounts.google.com/o/oauth2/token",
                           "type": "service_account"
                         }
                      }
                    }
                AzureProvisioner:
                  application/json:
                    {
                      "engine": "kqueen.engines.AksEngine",
                      "name": "AzurePostman5",
                      "owner": "User:09587e34-812d-4efc-af17-fbfd7315674c",
                      "parameters": {
                         "client_id":"48544b51-4c89-44c0-ba6d-2b80d21e032b",
                         "secret": "my_password",
                         "tenant": "70475187-fdde-4a8e-b088-7dda69aabb8d",
                         "subscription_id": "8c8b0653-693e-4e9c-b8f4-6c99847d6152",
                         "resource_group_name": "kqueen-demo-rg"
                      }
                    }
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getProvisioner"
        "400":
          description: "Request body is not valid JSON."
        "401":
          $ref: "#/components/responses/Unauthorized"
  /provisioners/{id}:
    get:
      summary: "Get information about target Provisioner"
      tags:
        - "Provisioners"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"
          format: "uuid"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getProvisioner"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          description: "Invalid ID or Provisioner not found"
    patch:
      summary: "Update data of target Provisioner"
      tags:
        - "Provisioners"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"
          format: "uuid"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/GCEProvisioner"
                - $ref: "#/components/schemas/AzureProvisioner"
                - $ref: "#/components/schemas/ManualProvisioner"
                - $ref: "#/components/schemas/JenkinsProvisioner"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getProvisioner"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          description: "Invalid ID or Provisioner not found"
    delete:
      summary: "Delete target Provisioner"
      tags:
        - "Provisioners"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"
          format: "uuid"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  id:
                    type: "string"
                    format: "uuid"
                  state:
                    type: "string"
                    example: "deleted"
        "400":
          description: "Invalid ID supplied"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          description: "Provisioner not found"
        "500":
          description: "Could not delete Provisioner"
  /provisioners/engines:
    get:
      summary: "List all available engines for Provisioners"
      tags:
        - "Provisioners"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Engine"
        "401":
          $ref: "#/components/responses/Unauthorized"
  /configurations/auth:
    get:
      summary: "Get information about auth classes configuration"
      tags:
        - "Auth"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                type: "array"
                $ref: "#/components/schemas/getUser"
        "401":
          $ref: "#/components/responses/Unauthorized"
